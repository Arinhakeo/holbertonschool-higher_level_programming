>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

# Test normal case
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> print(matrix_divided(matrix, 3))
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

# Test matrix unchanged
>>> print(matrix)
[[1, 2, 3], [4, 5, 6]]

# Test division by 1
>>> print(matrix_divided(matrix, 1))
[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

# Test division by float
>>> print(matrix_divided(matrix, 2.5))
[[0.4, 0.8, 1.2], [1.6, 2.0, 2.4]]

# Test matrix with floats
>>> matrix = [[1.1, -2.2, 3.3], [4.4, 5.5, -6.6]]
>>> print(matrix_divided(matrix, 3))
[[0.37, -0.73, 1.1], [1.47, 1.83, -2.2]]

# Test division by negative number
>>> print(matrix_divided(matrix, -3))
[[-0.37, 0.73, -1.1], [-1.47, -1.83, 2.2]]

# Test error: div is 0
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
    ...
ZeroDivisionError: division by zero

# Test error: div is not a number
>>> matrix_divided(matrix, "3")
Traceback (most recent call last):
    ...
TypeError: div must be a number

# Test error: matrix is not a list of lists
>>> matrix_divided([1, 2, 3], 3)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test error: matrix rows are not all the same size
>>> matrix_divided([[1, 2], [3, 4, 5]], 3)
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size

# Test error: matrix contains non-numbers
>>> matrix_divided([[1, 2], [3, "4"]], 3)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats